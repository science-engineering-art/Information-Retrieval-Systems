-En cranfield.py ... la idea no deberia ser que se escojan los primeros K documentos en el orden en que aparecen en las queries, sino en el orden de la prioridad que tu les diste como resultado del search.

-En qrels.py en buid_results, tu iteras por el numero del query_id desde 0 de uno en uno, pero eso no esta bien porque los id de las query no son tan homogeneos. Entonces en cranfield.py cuando pides todos los documentos con get_results para una query, estas pidiendolos segun la numeracion que les diste a la query (1...256), pero luego cuando haces cranfield.qrels[query_id][doc_id] el query_id ese no esta representando la misma query, y por tanto doc_id no tiene ni por que pertenecer a su respueta.

-Hay que annadir algo ahi pa cuando RR + RI == 0 no de error de division por zero.

-Ddeberiamos pensar en la posibilidad de usar una medida F mas balanceada hacia la precision.

-Ver lo de la incompatibilidad de Corupus, BaseModel y Document, con las versiones viejas que nosotros estabamos usando. No necesariamente tienes que cambiarlo, solamente tener claro cual era la idea de cada cosa. Aqui tambien hay algunas cosas que no todos los corpus las tienen iguales. Lo que hice para solucionarlo yo fue poner una pila de try catch ahi.

-En q_rels deberiamos pasarle el modelo como parametro para que podamos desde el main o desde donde sea (afuera) cambiar entre el modelo que se va a probar. Ademas buscar la forma de al archivo que se guarde con todos esos calculos, ponerle al final del nombre _model, para cuando estemos cambiando entre probar un modelo u otro no teneer que recalcular todas esas cosas. (que las de un modelo no sobreescriban las de otro).

-ver por que en cranfield.py repites el metodo build_qrels.
